---
import GitHub from "@/icons/GitHub.astro";
import Code from "@/icons/Code.astro";

import LinkButton from "@/components/LinkButton.astro";
import SectionContainer from "@/components/SectionContainer.astro";

import { getI18N } from "@/i18n";
import { getTranslatedProjects } from "@/lib/projects";

const { currentLocale } = Astro;
const i18n = getI18N({ currentLocale });

import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const translatedProjects = getTranslatedProjects((key: string) => {
  // Handle nested keys like "PROJECTS.UNIT_CONVERTER_DESCRIPTION"
  const parts = key.split(".");
  if (parts.length === 2 && parts[0] === "PROJECTS") {
    return i18n.PROJECTS[parts[1] as keyof typeof i18n.PROJECTS];
  }
  return key;
});
---

<SectionContainer id="projects" class="text-center sm:text-left text-pretty">
  <div class="flex items-center gap-2 mb-4 justify-center sm:justify-start">
    <h2 class="text-4xl opacity-70">{i18n.SECTION_TITLE.PROJECTS}</h2>
    <Code />
    <button
      class="dark:bg-aqua rounded-full px-2 text-bold sm:hover:opacity-75 transition bg-aqua2 text-slate-200 dark:text-black"
      >{i18n.PROJECTS_SHOWALL}</button
    >
  </div>
  <div class="flex flex-col gap-y-16">
    {
      translatedProjects.map(
        ({ image, title, description, tags, github, link }) => (
          <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
            <div class="w-full md:w-1/2 md:max-w-lg">
              <h3 class="text-2xl font-semibold text-aqua2 dark:text-aqua">
                {title}
              </h3>
              <div class="flex flex-wrap mt-2 justify-center sm:justify-start">
                <ul class="flex flex-row mb-2 gap-x-2">
                  {tags.map((tag) => (
                    <li>
                      <span
                        class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2`}
                      >
                        <tag.icon class="size-4" />
                        {tag.name}
                      </span>
                    </li>
                  ))}
                </ul>

                <p class="mt-2 text-gray-700 dark:text-gray-400">
                  {description}
                </p>
                <footer class="flex items-center justify-start mt-4 gap-x-4">
                  {github && (
                    <LinkButton href={github}>
                      <GitHub class="size-6" />
                      Code
                    </LinkButton>
                  )}
                  {link && (
                    <LinkButton href={link}>
                      <span class="">ðŸš€</span>
                      Live
                    </LinkButton>
                  )}
                </footer>
              </div>
            </div>
            <div class="w-full md:w-1/2">
              {image && (
                <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
                  <img
                    alt={`Captura de pantalla del proyecto ${image}`}
                    class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105"
                    loading="lazy"
                    src={image}
                  />
                </div>
              )}
            </div>
          </article>
        )
      )
    }
  </div>
</SectionContainer>
